STRING.H WITH ADDITIONS


TYPES

	size_t - used for a count of bytes. It is the result of the sizeof
operator. According to the C language standard, it shall be an unsigned
integer type capable of storing values  in  the  range  [0, SIZE_MAX].
According to POSIX, the implementation shall support one or more
programming environments where the width of size_t is no greater than the
width of the type long.

The length modifier for size_t for the printf and the scanf families of
functions is z; resulting commonly in %zu or %zx for printing size_t values.


MACRO

	NULL - this macro is the value of a null pointer constant.


STRING.H

	memchr, memrchr, rawmemchr - scan memory for a character
SYNOPSIS
	void *memchr(const void *s, int c, size_t n);
	void *memrchr(const void *s, int c, size_t n);
	void *rawmemchr(const void *s, int c);
DESCRIPTION
	The memchr() function scans the initial n bytes of the memory area
pointed to by s for the first instance of c. Both c and the bytes of the
memory area pointed to by s are interpreted as unsigned char.
	The memrchr() function is like the memchr() function, except that it searches
backward from the end of the n bytes pointed to by s instead of forward from the
beginning.
The rawmemchr() function is similar to memchr(): it assumes (i.e., the programmer
knows for certain) that an instance of c lies somewhere in the memory area starting
at the location pointed to by s, and  so  performs an optimized search for c (i.e.,
no use of a count argument to limit the range of the search). If an instance of c is
not found, the results are unpredictable.
RETURN VALUE
	The memchr() and memrchr() function returns a pointer to the matching byte or
NULL if the character does not occur in the given memory area.
	The rawmemchr() function returns a pointer to the matching byte, if one is found.
If no matching byte is found, the result is unspecified.

	memcmp - compare memory areas
SYNOPSIS
	int memcmp(const void *s1, const void *s2, size_t n);
DESCRIPTION
	The memcmp() function compares the first n bytes (each interpreted as
unsigned char) of the memory areas s1 and s2.
RETURN VALUE
	The  memcmp() function returns an integer less than, equal to, or
greater than zero if the first n bytes of s1 is found, respectively, to be
less than, to match, or be greater than the first n bytes of s2.
For a nonzero return value, the sign is determined by the sign of the
difference between the first pair of bytes (interpreted as unsigned char)
that differ in s1 and s2. If n is zero, the return value is zero.

	memcpy - copy memory area
SYNOPSIS
	void *memcpy(void *dest, const void *src, size_t n);
DESCRIPTION
	The memcpy() function copies n bytes from memory area src to memory
area dest. The memory areas must not overlap.
RETURN VALUE
	The memcpy() function returns a pointer to dest.

	memmove - copy memory area
SYNOPSIS
	void *memmove(void *dest, const void *src, size_t n);
DESCRIPTION
	The  memmove() function copies n bytes from memory area src to memory
area dest. The memory areas may overlap: copying takes place as though the
bytes in src are first copied into a temporary array that does not overlap
src or dest, and the bytes are then copied from the temporary array to dest.
RETURN VALUE
	The memmove() function returns a pointer to dest.

	memset - fill memory with a constant byte
SYNOPSIS
	void *memset(void *s, int c, size_t n);
DESCRIPTION
	The memset() function fills the first n bytes of the memory area pointed
to by s with the constant byte c.
RETURN VALUE
	The memset() function returns a pointer to the memory area s.

	strcat, strncat - concatenate two strings
SYNOPSIS
	char *strcat(char *restrict dest, const char *restrict src);
	char *strncat(char *restrict dest, const char *restrict src, size_t n);
DESCRIPTION
	The strcat() function appends the src string to the dest string,
overwriting the terminating null byte ('\0') at the end of dest, and then
adds a terminating null byte. The strings may not overlap, and the dest
string must have enough space for the result. If dest is not large enough,
program behavior is unpredictable; buffer overruns are a favorite avenue
for attacking secure programs. The strncat() function is similar, except
that it will use at most n bytes from src; and src does not need to be
null-terminated if it contains n or more bytes.
As with strcat(), the resulting string in dest is always null-terminated.
If src contains n or more bytes, strncat() writes n+1 bytes to dest
(n from src plus the terminating null byte). Therefore, the size of dest
must be at least strlen(dest)+n+1.
A simple implementation of strncat() might be:
RETURN VALUE
	The strcat() and strncat() functions return a pointer to the resulting
string dest.

	strcmp, strncmp - compare two strings
SYNOPSIS
	int strcmp(const char *s1, const char *s2);
	int strncmp(const char *s1, const char *s2, size_t n);
DESCRIPTION
	The strcmp() function compares the two strings s1 and s2. The
comparison is done using unsigned characters.
strcmp() returns an integer indicating the result of the comparison, as
follows:
• 0, if the s1 and s2 are equal;
• a negative value if s1 is less than s2;
• a positive value if s1 is greater than s2.
The strncmp() function is similar, except it compares only the first (at
most) n bytes of s1 and s2.
RETURN VALUE
	The strcmp() and strncmp() functions return an integer less than, equal
to, or greater than zero if s1 (or the first n bytes thereof) is found,
respectively, to be less than, to match, or be greater than s2.

