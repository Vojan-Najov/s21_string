STRING.H WITH ADDITIONS


TYPES

	size_t - used for a count of bytes. It is the result of the sizeof
operator. According to the C language standard, it shall be an unsigned
integer type capable of storing values  in  the  range  [0, SIZE_MAX].
According to POSIX, the implementation shall support one or more
programming environments where the width of size_t is no greater than the
width of the type long.

The length modifier for size_t for the printf and the scanf families of
functions is z; resulting commonly in %zu or %zx for printing size_t values.


MACRO

	NULL - this macro is the value of a null pointer constant.


STRING.H

	memchr, memrchr, rawmemchr - scan memory for a character
SYNOPSIS
	void *memchr(const void *s, int c, size_t n);
	void *memrchr(const void *s, int c, size_t n);
	void *rawmemchr(const void *s, int c);
DESCRIPTION
	The memchr() function scans the initial n bytes of the memory area
pointed to by s for the first instance of c. Both c and the bytes of the
memory area pointed to by s are interpreted as unsigned char.
	The memrchr() function is like the memchr() function, except that it searches
backward from the end of the n bytes pointed to by s instead of forward from the
beginning.
The rawmemchr() function is similar to memchr(): it assumes (i.e., the programmer
knows for certain) that an instance of c lies somewhere in the memory area starting
at the location pointed to by s, and  so  performs an optimized search for c (i.e.,
no use of a count argument to limit the range of the search). If an instance of c is
not found, the results are unpredictable.
RETURN VALUE
	The memchr() and memrchr() function returns a pointer to the matching byte or
NULL if the character does not occur in the given memory area.
	The rawmemchr() function returns a pointer to the matching byte, if one is found.
If no matching byte is found, the result is unspecified.

	memcmp - compare memory areas
SYNOPSIS
	int memcmp(const void *s1, const void *s2, size_t n);
DESCRIPTION
	The memcmp() function compares the first n bytes (each interpreted as
unsigned char) of the memory areas s1 and s2.
RETURN VALUE
	The  memcmp() function returns an integer less than, equal to, or
greater than zero if the first n bytes of s1 is found, respectively, to be
less than, to match, or be greater than the first n bytes of s2.
For a nonzero return value, the sign is determined by the sign of the
difference between the first pair of bytes (interpreted as unsigned char)
that differ in s1 and s2. If n is zero, the return value is zero.

	memcpy - copy memory area
SYNOPSIS
	void *memcpy(void *dest, const void *src, size_t n);
DESCRIPTION
	The memcpy() function copies n bytes from memory area src to memory
area dest. The memory areas must not overlap.
RETURN VALUE
	The memcpy() function returns a pointer to dest.

	memmove - copy memory area
SYNOPSIS
	void *memmove(void *dest, const void *src, size_t n);
DESCRIPTION
	The  memmove() function copies n bytes from memory area src to memory
area dest. The memory areas may overlap: copying takes place as though the
bytes in src are first copied into a temporary array that does not overlap
src or dest, and the bytes are then copied from the temporary array to dest.
RETURN VALUE
	The memmove() function returns a pointer to dest.

	memset - fill memory with a constant byte
SYNOPSIS
	void *memset(void *s, int c, size_t n);
DESCRIPTION
	The memset() function fills the first n bytes of the memory area pointed
to by s with the constant byte c.
RETURN VALUE
	The memset() function returns a pointer to the memory area s.

	strcat, strncat - concatenate two strings
SYNOPSIS
	char *strcat(char *restrict dest, const char *restrict src);
	char *strncat(char *restrict dest, const char *restrict src, size_t n);
DESCRIPTION
	The strcat() function appends the src string to the dest string,
overwriting the terminating null byte ('\0') at the end of dest, and then
adds a terminating null byte. The strings may not overlap, and the dest
string must have enough space for the result. If dest is not large enough,
program behavior is unpredictable; buffer overruns are a favorite avenue
for attacking secure programs. The strncat() function is similar, except
that it will use at most n bytes from src; and src does not need to be
null-terminated if it contains n or more bytes.
As with strcat(), the resulting string in dest is always null-terminated.
If src contains n or more bytes, strncat() writes n+1 bytes to dest
(n from src plus the terminating null byte). Therefore, the size of dest
must be at least strlen(dest)+n+1.
A simple implementation of strncat() might be:
RETURN VALUE
	The strcat() and strncat() functions return a pointer to the resulting
string dest.

	strchr, strrchr, strchrnul - locate character in string
SYNOPSIS
	char *strchr(const char *s, int c);
	char *strrchr(const char *s, int c);
	char *strchrnul(const char *s, int c);
DESCRIPTION
	The strchr() function returns a pointer to the first occurrence of the character
c in the string s.
	The strrchr() function returns a pointer to the last occurrence of the character
c in the string s.
	The strchrnul() function is like strchr() except that if c is not found in s,
then it returns a pointer to the null byte at the end of s, rather than NULL.
	Here "character" means "byte"; these functions do not work with wide or
multibyte characters.
RETURN VALUE
	The strchr() and strrchr() functions return a pointer to the matched
character or NULL if the character is not found. The terminating null byte is
considered part of the string, so that if c is specified as '\0', these functions
return a pointer to the terminator.
	The strchrnul() function returns a pointer to the matched character, or a
pointer to the null byte at the end of s (i.e., s+strlen(s)) if the character is not
found.

	strcmp, strncmp - compare two strings
SYNOPSIS
	int strcmp(const char *s1, const char *s2);
	int strncmp(const char *s1, const char *s2, size_t n);
DESCRIPTION
	The strcmp() function compares the two strings s1 and s2. The
comparison is done using unsigned characters.
strcmp() returns an integer indicating the result of the comparison, as
follows:
• 0, if the s1 and s2 are equal;
• a negative value if s1 is less than s2;
• a positive value if s1 is greater than s2.
The strncmp() function is similar, except it compares only the first (at
most) n bytes of s1 and s2.
RETURN VALUE
	The strcmp() and strncmp() functions return an integer less than, equal
to, or greater than zero if s1 (or the first n bytes thereof) is found,
respectively, to be less than, to match, or be greater than s2.


	strcpy, strncpy - copy a string
SYNOPSIS
	char *strcpy(char *restrict dest, const char *restrict src);
	char *strncpy(char *restrict dest, const char *restrict src, size_t n);
DESCRIPTION
	The strcpy() function copies the string pointed to by src, including the
terminating null byte ('\0'), to the buffer pointed to by dest. The strings may not
overlap, and the destination string dest must be large enough to receive the copy.
Beware of buffer overruns!
	The strncpy() function is similar, except that at most n bytes of src are copied.
Warning: If there is no null byte among the first n bytes of src, the string placed
in dest will not be null-terminated.
If the length of src is less than n, strncpy() writes additional null bytes to dest
to ensure that a total of n bytes are written.
RETURN VALUE
	The strcpy() and strncpy() functions return a pointer to the
destination string dest.

	strspn, strcspn - get length of a prefix substring
SYNOPSIS
	size_t strspn(const char *s, const char *accept);
	size_t strcspn(const char *s, const char *reject);
DESCRIPTION
	The strspn() function calculates the length (in bytes) of the initial segment
of s which consists entirely of bytes in accept.
	The strcspn() function calculates the length of the initial segment
of s which consists entirely of bytes not in reject.
RETURN VALUE
	The strspn() function returns the number of bytes in the initial segment of s
which consist only of bytes from accept.
	The strcspn() function returns the number of bytes in the initial segment of s
which are not in the string reject.

	strlen - calculate the length of a string
SYNOPSIS
	size_t strlen(const char *s);
DESCRIPTION
	The strlen() function calculates the length of the string pointed to by s,
excluding the terminating null byte (0).
RETURN VALUE
	The strlen() function returns the number of bytes in the string pointed to by s.

	strpbrk - search a string for any of a set of bytes
SYNOPSIS
	char *strpbrk(const char *s, const char *accept);
DESCRIPTION
	The strpbrk() function locates the first occurrence in the string s of any of
the bytes in the string accept.
RETURN VALUE
	The strpbrk() function returns a pointer to the byte in s that matches one of
the bytes in accept, or NULL if no such byte is found.

	strstr, strcasestr - locate a substring
SYNOPSIS
	char *strstr(const char *haystack, const char *needle);
	char *strcasestr(const char *haystack, const char *needle);
DESCRIPTION
    The strstr() function finds the first occurrence of the substring needle in the
string haystack. The terminating null bytes ('\0') are not compared.
	The strcasestr() function is like strstr(), but ignores the case of both
arguments.
RETURN VALUE
	These functions return a pointer to the beginning of the located substring,
or NULL if the substring is not found.
If needle is the empty string, the return value is always haystack itself.

	strtok, strtok_r - extract tokens from strings
SYNOPSIS
	char *strtok(char *restrict str, const char *restrict delim);
	char *strtok_r(char *restrict str, const char *restrict delim,
                   char **restrict saveptr);
DESCRIPTION
	The  strtok()  function  breaks a string into a sequence of zero or more nonempty
tokens. On the first call to strtok(), the string to be parsed should be specified
in str. In each subsequent call that should parse the same string, str must be NULL.
	The delim argument specifies a set of bytes that delimit the tokens in the parsed
string. The caller may specify different strings in delim in successive calls that
parse the same string.
	Each call to strtok() returns a pointer to a null-terminated string containing
the next token.  This string does not include the delimiting byte. If no more tokens
are found, strtok() returns NULL.
	A sequence of calls to strtok() that operate on the same string maintains a
pointer that determines the point from which to start searching for the next token.
The first call to strtok() sets  this pointer  to  point to the first byte of the
string. The start of the next token is determined by scanning forward for the next
nondelimiter byte in str. If such a byte is found, it is taken as the start of the
next token. If no such byte is found, then there are no more tokens, and strtok()
returns NULL. (A string that is empty or that contains only delimiters will thus
cause  strtok()  to return NULL on the first call.)
	The  end of each token is found by scanning forward until either the next
delimiter byte is found or until the terminating null byte ('\0') is encountered.
If a delimiter byte is found, it is overwritten with a null byte to terminate the
current token, and strtok() saves a pointer to the following byte; that pointer will
be used as the starting point when searching for the  next  token. In this case,
strtok() returns a pointer to the start of the found token.
From the above description, it follows that a sequence of two or more contiguous
delimiter bytes in the parsed string is considered to be a single delimiter, and that
delimiter bytes at the start or end of the string are ignored. Put another way: the
tokens returned by strtok() are always nonempty strings. Thus, for example, given the
string "aaa;;bbb,",  successive  calls  to  strtok()  that specify the delimiter
string ";," would return the strings "aaa" and "bbb", and then a null pointer.
	The strtok_r() function is a reentrant version of strtok(). The saveptr argument
is a pointer to a char * variable that is used internally by strtok_r() in order to
maintain context between successive calls that parse the same string.
	On the first call to strtok_r(), str should point to the string to be parsed, and
the value of *saveptr is ignored (but see NOTES). In subsequent calls, str should be
NULL, and  saveptr  (and  the buffer that it points to) should be unchanged since
the previous call.
	Different strings may be parsed concurrently using sequences of calls to
strtok_r() that specify different saveptr arguments.
RETURN VALUE
	The strtok() and strtok_r() functions return a pointer to the next token,
or NULL if there are no more tokens.
